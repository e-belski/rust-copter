# Quality checks that can happen across the whole workspace

name: Workspace

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  
jobs:

  # Run clippy, which builds and lints the code
  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy
        target: thumbv7em-none-eabihf
        override: true
    - uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --verbose --target thumbv7em-none-eabihf --workspace --manifest-path firmware/Cargo.toml -- -D warnings
        name: Run clippy for firmware
    - uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --verbose --workspace --manifest-path host/Cargo.toml -- -D warnings
        name: Run clippy for host

  # Ensure code is formatted
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: rustup component add rustfmt
    - name: Check firmware code formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --verbose --all --manifest-path firmware/Cargo.toml -- --check
    - name: Check host code formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --verbose --all --manifest-path host/Cargo.toml -- --check

  # Build all Rust code on macOS, Ubuntu, and Windows
  xplat:
    strategy:
      matrix:
        host: [ macos-latest, ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.host }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: thumbv7em-none-eabihf
    - name: Build firmware
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --workspace --target thumbv7em-none-eabihf --manifest-path firmware/Cargo.toml
    - name: Build host
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --workspace --manifest-path host/Cargo.toml
